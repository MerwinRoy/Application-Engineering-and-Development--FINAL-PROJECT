/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.LabRole;

//Import EcoSystem
import Business.EcoSystem;

//Import Enterprise
import Business.Enterprise.Enterprise;

//Import Organization
import Business.Organization.Organization;

//Import UserAccount
import Business.UserAccount.UserAccount;

//Import Lab work request
import Business.WorkQueue.LabWorkReq;

//Import workrequest
import Business.WorkQueue.WorkRequest;

//Import cardlayout
import java.awt.CardLayout;

//Import JOptionPane
import javax.swing.JOptionPane;

//Import JPanel
import javax.swing.JPanel;

//Import table model
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pradyumnareddy
 */
public class LabAssistantWorkAreaJPanel extends javax.swing.JPanel 

{
    //import container
    private JPanel container;
    
    //import org
    private Organization org;
    
    //import enterprise
    private Enterprise enterprise;
    
    //import ecoSystem
    private EcoSystem ecoSystem;
    
    //import account
    private UserAccount account;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public LabAssistantWorkAreaJPanel(JPanel container,
            UserAccount account,
            Organization org,
            Enterprise enterprise)
    
    {
        
        //Initialize components
        initComponents();
        
        this.
                container = container;
        this.
                account = account;
        this.
                org = org;
        this.
                enterprise=enterprise;
        
        //populate table
        populateTable();
    }
    

    
    //function to populate table
    public void populateTable()
            
    {
        //tableModel object created
        DefaultTableModel tableModel = (DefaultTableModel)tblWorkRequest.
                getModel();
        
        tableModel.setRowCount(0);
        
        //for loop to iterate through list of work request
        for(WorkRequest request : org.getWorkQueue().getListOfWorkRequest())
        {
            Object[] row = new Object[3];
            
            row[0]=request;
            
            row[1] = request.
                    getSenderAccount().
                    getEmployee().
                    getName();
            
            row[2] = request.
                    getReceiverAccount() == null ? null : request.
                    getReceiverAccount().
                            getEmployee().
                            getName();
            
            //add row to model after each iteration
            tableModel.addRow(row);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkRequest = new javax.swing.JTable();
        btnAssign = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();
        txtMessage = new javax.swing.JTextField();
        lblLabStatus = new javax.swing.JLabel();
        txtLabStatus = new javax.swing.JTextField();
        lblLabResults = new javax.swing.JLabel();
        txtLabResults = new javax.swing.JTextField();
        btnViewData = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();

        setLayout(null);

        tblWorkRequest.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        tblWorkRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MESSAGE", "Sender", "Receiver"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblWorkRequest);
        if (tblWorkRequest.getColumnModel().getColumnCount() > 0) {
            tblWorkRequest.getColumnModel().getColumn(0).setResizable(false);
            tblWorkRequest.getColumnModel().getColumn(1).setResizable(false);
            tblWorkRequest.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(260, 80, 590, 220);

        btnAssign.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnAssign.setText("Assign to me");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });
        add(btnAssign);
        btnAssign.setBounds(560, 320, 150, 30);

        btnProcess.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });
        add(btnProcess);
        btnProcess.setBounds(710, 320, 150, 30);

        btnRefresh.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh);
        btnRefresh.setBounds(260, 320, 150, 30);

        lblMessage.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblMessage.setText("Doctor's Message:");
        add(lblMessage);
        lblMessage.setBounds(260, 440, 140, 21);

        txtMessage.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        txtMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMessageActionPerformed(evt);
            }
        });
        add(txtMessage);
        txtMessage.setBounds(430, 440, 320, 30);

        lblLabStatus.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblLabStatus.setForeground(new java.awt.Color(0, 51, 51));
        lblLabStatus.setText("Lab Status:");
        add(lblLabStatus);
        lblLabStatus.setBounds(260, 490, 86, 21);

        txtLabStatus.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        txtLabStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLabStatusActionPerformed(evt);
            }
        });
        add(txtLabStatus);
        txtLabStatus.setBounds(430, 480, 320, 30);

        lblLabResults.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblLabResults.setForeground(new java.awt.Color(51, 0, 51));
        lblLabResults.setText("Lab Results:");
        add(lblLabResults);
        lblLabResults.setBounds(260, 540, 153, 21);

        txtLabResults.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        txtLabResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLabResultsActionPerformed(evt);
            }
        });
        add(txtLabResults);
        txtLabResults.setBounds(430, 530, 320, 30);

        btnViewData.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnViewData.setText("View Data");
        btnViewData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDataActionPerformed(evt);
            }
        });
        add(btnViewData);
        btnViewData.setBounds(410, 320, 150, 30);

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/background-emergency_1378x910.jpeg"))); // NOI18N
        add(lblImage);
        lblImage.setBounds(0, 0, 1378, 910);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed

        //select row from table
        int selectedRow = tblWorkRequest.
                getSelectedRow();
        
        //condition if no row is selected
        if (selectedRow < 0)
        {
            //Prompt error
            JOptionPane.
                    showMessageDialog(null, "Please select a row from the table to proceed", "warning", JOptionPane.
                            WARNING_MESSAGE);
            return;
        }
        
        //workrequest object to refer to row in table
        WorkRequest workRequest = (WorkRequest)tblWorkRequest.
                getValueAt(selectedRow, 0);
        
        if(workRequest.
                getReceiverAccount()!=null)
        {
            //prompt error
            JOptionPane.
                    showMessageDialog(null, "Request is already being processed!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //set receiver account
        workRequest.
                setReceiverAccount(account);
        
        //set status
        workRequest.
                setStatus("Pending Lab Test");
        populateTable();
       // populateworkArea();
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        
        //select row from table
        int selectedRow = tblWorkRequest.
                getSelectedRow();
        
        //condition if no row is selected
        if (selectedRow < 0)
        {
            //Prompt error
            JOptionPane.
                    showMessageDialog(null, "Please select a row fromt the table to proceed", "warning", JOptionPane.
                            WARNING_MESSAGE);
            
            return;
        }
        
        //LabWorkRequest object to refer to values in table
        LabWorkReq labWorkRequest = (LabWorkReq)tblWorkRequest.
                getValueAt(selectedRow, 0);
        
         if(labWorkRequest.
                 getReceiverAccount() == null)
        {
            //Prompt warning
            JOptionPane.
                    showMessageDialog(null, "Need to assign the request first", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
         
         
        
        if(labWorkRequest.
                getStatus().
                equalsIgnoreCase("Completed"))
        {
            //Success prompt
            JOptionPane.
                    showMessageDialog(null, "Request completed", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        //set request status
        labWorkRequest.
                setStatus("Processing with Test");
        
        //New JPanel object
        ProcessWorkRequestJPanel pwrJPanel = new ProcessWorkRequestJPanel(container, labWorkRequest);
        
        //container added
        container.
                add("processWorkRequestJPanel", pwrJPanel);
        
        //cardlayout object created
        CardLayout cardLayout = (CardLayout) container.
                getLayout();
        
        //next layout loaded
        cardLayout.
                next(container);
        
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        //refresh table
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void txtMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMessageActionPerformed

    private void txtLabStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLabStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLabStatusActionPerformed

    private void txtLabResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLabResultsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLabResultsActionPerformed

    private void btnViewDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDataActionPerformed
        // TODO add your handling code here:
        
        //select row from table
        int selectedRow = tblWorkRequest.
                getSelectedRow();
        
        if (selectedRow < 0)
        
        {
            return;
        }
        
        //LabWorkRequest object to point to values at table
        LabWorkReq labWorkRequest = (LabWorkReq)tblWorkRequest.getValueAt(selectedRow, 0);
        
        
        //fetch result to doctor's message textfield     
        txtMessage.
                setText(labWorkRequest.
                getMessage());
        String result = ((LabWorkReq) labWorkRequest).
                getResult();
        
        
        //fetch status to status textfield
        txtLabStatus.
                setText(labWorkRequest.
                getStatus());
                        

        
        
        if(result==null)
        {
            //set result text
            txtLabResults.
                    setText("Waiting fo Lab to respond");
        }
        else
        {
            //set result text
            txtLabResults.
                    setText(result);
        }
        
    }//GEN-LAST:event_btnViewDataActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnViewData;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblLabResults;
    private javax.swing.JLabel lblLabStatus;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JTable tblWorkRequest;
    private javax.swing.JTextField txtLabResults;
    private javax.swing.JTextField txtLabStatus;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables
}
