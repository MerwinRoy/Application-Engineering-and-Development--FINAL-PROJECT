/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.PatientRole;

import Business.Network.Network;
import Business.Organization.PatientOrg;
import Business.Organization.DocOrg;
import Business.Organization.Organization;

import Business.EcoSystem;
import Business.Employee.Patient;

import Business.Employee.VitalSign;
import Business.Enterprise.Enterprise;

import Business.Validation.Checker_Main;
import Business.Validation.NumberChecker;
import Business.WorkQueue.DocWorkReq;
import Business.WorkQueue.DonorWorkReq;
import Business.WorkQueue.LabWorkReq;
import Business.WorkQueue.ManagementWorkReq;
import Business.WorkQueue.WorkRequest;



import Business.UserAccount.UserAccount;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.InputVerifier;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author raj
 */
public class VitalSignDocJPanel extends javax.swing.JPanel 

{

    /**
     * Creates new form VitalSignDocJPanel
     */
    private JPanel container;
    private PatientOrg organization;
    private Enterprise enterprise;
    private UserAccount account;
    EcoSystem ecoSystem;
    private Patient applicant;
    private DocOrg doctorOrganization;
    public VitalSignDocJPanel(JPanel container, 
            UserAccount account,
            PatientOrg organization,
            Enterprise enterprise, EcoSystem ecoSystem) 
    {
        initComponents();
        this.
                container = container;
        this.
                organization = organization;
        this.
                enterprise = enterprise;
        this.
                account = account;
        this.
                ecoSystem=ecoSystem;
        
        
        inputVerifier();
        //applicant=userAccount.getApplicant();
        applicant = new Patient(account.
                getEmployee());
        
        
        populateDoctorComboBox();
        
        populateRequestTable();
        //valueLabel.setText(enterprise.getName());

    }

    public void inputVerifier()
    {
        InputVerifier numberValidation = new NumberChecker();
        txtHeartRate.setInputVerifier(numberValidation);
        txtPulse.setInputVerifier(numberValidation);
        txtWeight.setInputVerifier(numberValidation);
        txtBloodPressure.setInputVerifier(numberValidation);
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void populateRequestTable()
    {
        DefaultTableModel tableModel = (DefaultTableModel) tblWorkRequest.getModel();
        
        tableModel.
                setRowCount(0);
        
        
        for (WorkRequest request : account.
                getWorkQueue().
                getListOfWorkRequest())
        {
            if(!(request instanceof LabWorkReq)
                    
                    && !(request instanceof DonorWorkReq) 
                    
                    && !(request instanceof ManagementWorkReq))
            {
            Object[] row = new Object[4];
            row[0] = request;
            
            row[1] = request.
                    
                    getReceiverAccount() == null ? null : request.
                            getReceiverAccount().getEmployee().
                            getName();
            row[2] = request.
                    getStatus();
            
            String result = ((DocWorkReq) request).
                    getDiagnosis();
            
            row[3] = result == null ? "Waiting For Doctor to respond" : result;
            
            
            tableModel.
                    addRow(row);
            }
            
            
        }
    }
    
    
    
    public void populateDoctorComboBox()
    {
       try
       {
        cmbDonor.
                removeAllItems();
        doctorOrganization =  Checker_Main.
                getDoctorOrg(ecoSystem, account);
       if(doctorOrganization!=null)
       {
        if(doctorOrganization.
                getUserAccountDirectory().
                getListOfUserAccount().
                isEmpty())
        {
        JOptionPane.
                showMessageDialog(null, "No doctors exists in our records as of now!","warning", JOptionPane.WARNING_MESSAGE);
         return;    
        }
         cmbDonor.
                 removeAllItems();
        for(UserAccount uaccount : doctorOrganization.
                getUserAccountDirectory().
                getListOfUserAccount())
        {
             cmbDonor.
                        addItem(uaccount);
        }   
       }
       }
       catch(NullPointerException npe)
       {
        
           JOptionPane.
               showMessageDialog(null, "Dcotor Organization exists in our records as of now!","warning", JOptionPane.WARNING_MESSAGE);
         return;       
       }        
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        txtHeartRate = new javax.swing.JTextField();
        lblBloodPressure = new javax.swing.JLabel();
        lblPulse = new javax.swing.JLabel();
        lblWeight = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        txtWeight = new javax.swing.JTextField();
        txtPulse = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        lblHeartRate = new javax.swing.JLabel();
        lblProblemDescription = new javax.swing.JLabel();
        txtProblemDescription = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkRequest = new javax.swing.JTable();
        lblDoctor = new javax.swing.JLabel();
        cmbDonor = new javax.swing.JComboBox();
        btnBack = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitle.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        lblTitle.setText("SUBMIT PANEL (VITAL SIGNS TO DOCTOR)");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, -1, -1));

        txtHeartRate.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        txtHeartRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHeartRateActionPerformed(evt);
            }
        });
        add(txtHeartRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 420, 210, -1));

        lblBloodPressure.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblBloodPressure.setText("Blood Pressure:");
        add(lblBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 470, -1, -1));

        lblPulse.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblPulse.setText("Pulse:");
        add(lblPulse, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 511, 50, 30));

        lblWeight.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblWeight.setText("Weight:");
        add(lblWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 561, 60, 30));

        txtBloodPressure.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        add(txtBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 460, 210, -1));

        txtWeight.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        txtWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWeightActionPerformed(evt);
            }
        });
        add(txtWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 560, 210, -1));

        txtPulse.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        add(txtPulse, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 510, 210, -1));

        btnSubmit.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 710, -1, 40));

        lblHeartRate.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblHeartRate.setText("Heart Rate:");
        add(lblHeartRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 430, -1, -1));

        lblProblemDescription.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblProblemDescription.setText("Problem Desc:");
        add(lblProblemDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 611, 120, 30));

        txtProblemDescription.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        txtProblemDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProblemDescriptionActionPerformed(evt);
            }
        });
        add(txtProblemDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 610, 210, -1));

        tblWorkRequest.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        tblWorkRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MESSAGE", "RECEIVER", "STATUS", "RESULT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblWorkRequest);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 180, 540, 210));

        lblDoctor.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblDoctor.setText("Select a doctor you wish to send data to:");
        add(lblDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 140, 340, 30));

        cmbDonor.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        cmbDonor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(cmbDonor, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 130, 180, 40));

        btnBack.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Double Left_100px.png"))); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 830, 60, 40));

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/background-emergency_1378x910.jpeg"))); // NOI18N
        add(lblImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1378, 910));
    }// </editor-fold>//GEN-END:initComponents

    private void txtHeartRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHeartRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHeartRateActionPerformed

    private void txtWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWeightActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        UserAccount docAccount = (UserAccount) cmbDonor.getSelectedItem();
        
        double Weight = Double.
                parseDouble(txtWeight.getText());
        
        
        double HearRate = Double.
                parseDouble(txtHeartRate.getText());
        
        
        double Bp = Double.
                parseDouble(txtBloodPressure.getText());
        int Pulse = Integer.parseInt(txtPulse.getText());
        
        
        
        
        
        
        String message = txtProblemDescription.
                getText();
        
        if( txtHeartRate.getText().
                trim().
                isEmpty() 
                ||
            txtBloodPressure.
                    getText().
                    trim().isEmpty() ||
            txtPulse.getText().
                    trim().isEmpty() ||
            txtWeight.getText().
                    trim().isEmpty() ||
            txtProblemDescription.
                    getText().
                    trim().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter all the details");
            return;
        }
        
        VitalSign vitalSign =applicant.
                addVital();
        
         vitalSign.
                setPulse(Pulse);
        
        vitalSign.
                setWeight(Weight);
        vitalSign.
                setBloodPressure(Bp);
        
        vitalSign.
                setHeartRate(HearRate);
        
       
        
        vitalSign.
                setTimeStamp(new Date());
        DocWorkReq request = new DocWorkReq();
        
        request.
                setMessage(message);
        
        request.
                setSenderAccount(account);
        
        
        request.
                setStatus("Request to Doctor");

        ArrayList<VitalSign> vital = new ArrayList<>();
        
        vital.
                add(vitalSign);
        request.
                setVitalSignList(vital);
                
       for (Network N : ecoSystem.
               getNetworkList()) {
            
            
                for ( Enterprise e   : N.
                        getEnterpriseDirectory().
                        getListOfEnterprise()) {
                    
                        e.
                                setTypeOfEnterprise(Enterprise.
                                        EnterpriseType.
                                        Hospital);    
                        if (e.
                                getTypeOfEnterprise().
                                getValue().
                                equals("Hospital"))
                    {
        Organization org = null;
        
        
        for (Organization organization : e.getOrganizationDirectory()
                .getListOfOrganization())
        {
            if (organization instanceof DocOrg){
                org = organization;
                break;
            }
        }

        if (org!=null)
        {
            docAccount.
                    
                    getWorkQueue().
                    getListOfWorkRequest().
                    add(request);
            account.
                    getWorkQueue().
                    getListOfWorkRequest().
                    add(request);
        }
                    }
                
            }
          }
        JOptionPane.
                showMessageDialog(null, "VitalSigns sent to Doctor successfully");
        
        txtWeight.
                setText("");
        txtProblemDescription.
                setText("");
        txtHeartRate.
                setText("");
        txtBloodPressure.
                setText("");
        txtPulse.
                setText("");
        
        populateRequestTable();

    }//GEN-LAST:event_btnSubmitActionPerformed

    private void txtProblemDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProblemDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProblemDescriptionActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        container.
                remove(this);
        CardLayout cardLayout = (CardLayout)container.
                getLayout();
        cardLayout.
                previous(container);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox cmbDonor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblDoctor;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblProblemDescription;
    private javax.swing.JLabel lblPulse;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JTable tblWorkRequest;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtProblemDescription;
    private javax.swing.JTextField txtPulse;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}
